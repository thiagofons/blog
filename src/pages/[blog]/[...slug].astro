---
// Imports
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import Base from "@layouts/Base.astro";
import { Image } from "astro:assets";
import { formatDate } from "@utils/utils";
import "@styles/markdown.css";
import { useTranslatedPath } from "@i18n/utils";
import { languages, defaultLang, showDefaultLang } from "@i18n/ui";
import { routes } from "@i18n/routes";

// Get current language from URL and generate paths for each blog post
export const getStaticPaths = (async () => {
    // Fetch all blog posts and authors
    const posts = await getCollection("blog", (entry) => !entry.data.isDraft);
    const authorsRaw = await getCollection("authors");

    // Translate a base route name for a given language
    const tr = (key: string, code: string) => routes[code]?.[key] ?? key;

    return Object.keys(languages).flatMap((code) => {
        const translatePath = useTranslatedPath(code as any);
        const baseList = translatePath("/blog"); // e.g. /blog, /sl/spletni-dnevnik, /en/blog
        const segs = baseList.split("/").filter(Boolean);
        const isRoot = !showDefaultLang && code === defaultLang;
        const blogSeg = isRoot ? tr("blog", code) : segs[0];
        const listRest = isRoot ? undefined : segs.slice(1).join("/");

        return posts
            .filter((post) => post.id.startsWith(`${code}/`))
            .map((post) => {
                const slug = post.id.split("/")[1];
                const author = authorsRaw.find((a) => a.id === post.data.author.id);
                const localizedAuthor = author && {
                    ...author,
                    data: {
                        ...author.data,
                        position:
                            author.data.position?.[code] ?? author.data.position?.en ?? "",
                    },
                };

                // Params shape for [blog]/[...slug]
                // - Root language: blog = translated blog segment, slug = post slug
                // - Prefixed languages: blog = lang code, slug = "<translated blog>/<postSlug>"
                const params = isRoot
                    ? { blog: blogSeg, slug }
                    : { blog: segs[0], slug: `${listRest}/${slug}` };

                return { params, props: { post, lang: code, author: localizedAuthor } };
            });
    });
}) satisfies GetStaticPaths;

// Props
const { post, author } = Astro.props;

// Render the MD content of the blog post
const { Content } = await render(post);
---

<Base
    title={post?.data?.title}
    meta={{
        description: post?.data?.description,
        keywords: post?.data?.keywords,
        image: post?.data?.image?.src,
    }}
>
    <section role="main" aria-labelledby="article-title">
        <article
            role="article"
            aria-labelledby="article-title"
            aria-describedby="article-meta"
        >
            <!--Main Article Image-->
            <Image
                src={post?.data?.image}
                alt={post?.data?.imageAlt}
                class="mb-10"
                loading="eager"
                quality={"high"}
                sizes="(min-width: 1024px) 800px, 100vw"
                role="img"
                transition:name={`${post.data.title}-image`}
            />

            <!--Article Title-->
            <h1 id="article-title" class="!text-left">
                {post?.data?.title}
            </h1>

            <div id="article-meta" class="author-time" role="contentinfo">
                <div class="author" role="group">
                    <Image
                        src={author?.data?.image}
                        alt={`${author?.data?.name}`}
                        height={36}
                        width={36}
                        loading="eager"
                        quality={"high"}
                        class="rounded-full"
                        role="img"
                    />
                    <div>
                        <h3>{author?.data?.name}</h3>
                        <p
                            class="position"
                            aria-label={`${author?.data?.position}`}
                        >
                            {author?.data?.position}
                        </p>
                    </div>
                </div>
                <time
                    class="date"
                    datetime={post.data.pubDate.toISOString()}
                    aria-label={`${formatDate(post.data.pubDate)}`}
                >
                    {formatDate(post.data.pubDate)}
                </time>
            </div>

            <!--Markdown Content-->
            <section id="md-content" role="main">
                <Content />
            </section>
        </article>
    </section>
</Base>
